max=function(values){var ret=Number.MIN_VALUE;for(var i=0;i<values.length;i++){if(values[i]>ret){ret=values[i]}}return ret};min=function(values){var ret=Number.MAX_VALUE;for(var i=0;i<values.length;i++){if(values[i]<ret){ret=values[i]}}return ret};mean=function(values){var mean=0;if(values.length==0)return mean;for(var i=0;i<values.length;i++){mean+=values[i]}return mean/values.length};sd=function(values){var meanVal=mean(values);var sqrSum=0;for(var i=0;i<values.length;i++){sqrSum+=Math.pow(values[i]-meanVal,2)}return Math.sqrt(sqrSum/values.length)};windowOp=function(values,value,fun){var result=new Array;for(var i=value;i<=values.length;i++){var windowVal=fun(values.slice(i-value,i));result.push(windowVal)}return result};if(!Array.prototype.forEach){Array.prototype.forEach=function(fn,scope){for(var i=0,len=this.length;i<len;++i){if(i in this){fn.call(scope,this[i],i,this)}}}}diffVectors=function(series1,series2){var size=max([series1.length,series2.length]);var result=[];var s1Size=series1.length;var s2Size=series2.length;for(var i=0;i<size;i++){var itemS1=0;var itemS2=0;if(s1Size>i){itemS1=series1[i]}if(s2Size>i){itemS2=series2[i]}result.push(itemS1-itemS2)}return result};powVector=function(serie){var result=[];pow=function(x){result.push(Math.pow(x,2))};serie.forEach(pow);return result};sumVector=function(vector){var result=0;sum=function(x){result+=x};vector.forEach(sum);return result};avgVector=function(vector){var result=sumVector(vector);if(!vector.length)return 0;else return result/vector.length};absVector=function(vector){var result=[];vector.forEach(function ab(x){result.push(Math.abs(x))});return result};divVector=function(v1,v2){var result=[];for(var i=0;i<v1.length;i++){result.push(v1[i]/v2[i])}return result};combineVectors=function(serie1,serie2,fun){if(serie1.length!=serie2.length||serie1.length+serie2.length<2){return[-1]}else{var result=[];for(var i=0;i<serie1.length;i++){result.push(fun(serie1[i],serie2[i]))}return result}};mse=function(series1,series2){return avgVector(powVector(diffVectors(series1,series2)))};rmse=function(series1,series2){return Math.sqrt(mse(series1,series2))};mae=function(series1,series2){return avgVector(absVector(diffVectors(series1,series2)))};bollinger=function(list,n,k){var movingAvg=ma(list,n);var movingSd=windowOp(list,n,sd);var upperBand=new Array;var lowerBand=new Array;var movingAvgElem=0;var movingSdElem=0;for(var index=0;index<movingSd.length;index++){movingAvgElem=movingAvg[index];movingSdElem=movingSd[index]*k;upperBand.push(movingAvgElem+movingSdElem);lowerBand.push(movingAvgElem-movingSdElem)}return{upperBand:upperBand,ma:movingAvg,lowerBand:lowerBand}};ma=function(values,order){sumWindow=function(serie){var sum=0;for(var init=0;init<serie.length;init++)sum+=serie[init];return sum/serie.length};return windowOp(values,order,sumWindow)};ema=function(serie,period){var result=new Array;for(var i=0;i<period-1;i++){result.push(0)}var k=2/(period+1);var initSlice=serie.slice(0,period);var previousDay=avgVector(initSlice);result.push(previousDay);var emaSlice=serie.slice(period);emaSlice.forEach(function getEma(i){previousDay=i*k+previousDay*(1-k);result.push(previousDay)});return result};wma=function(series,weights){sumWindow=function(serie){var sum=0;for(var init=0;init<serie.length;init++)sum=sum+serie[init]*weights[init];return sum/serie.length};return windowOp(series,weights.length,sumWindow)};obv=function(closeList,volumeList){var result=[];var prevObv=volumeList[0];result.push(prevObv);for(var i=1;i<closeList.length;i++){if(closeList[i]>closeList[i-1]){result.push(prevObv+volumeList[i]);prevObv+=volumeList[i]}else if(closeList[i]<closeList[i-1]){result.push(prevObv-volumeList[i]);prevObv-=volumeList[i]}else{result.push(prevObv)}}return result};vpt=function(closeList,volumeList){var result=[];var vpt=volumeList[0];result.push(vpt);for(var i=1;i<closeList.length;i++){var newVpt=vpt+volumeList[i]*((closeList[i]-closeList[i-1])/closeList[i-1]);result.push(newVpt);vpt=newVpt}return result};mfi=function(highPrices,lowPrices,closePrices,volumes){var typicalMoney=[];var moneyFlow=[];for(var i=0;i<highPrices.length;i++){var tpMoney=(highPrices[i]+lowPrices[i]+closePrices[i])/3;typicalMoney.push(tpMoney);moneyFlow.push(tpMoney*volumes[i])}var posMoneyFlow=[];var negMoneyFlow=[];for(var i=0;i<typicalMoney.length-1;i++){if(typicalMoney[i]<=typicalMoney[i+1]){posMoneyFlow.push(moneyFlow[i+1]);negMoneyFlow.push(0)}else if(typicalMoney[i]>typicalMoney[i+1]){posMoneyFlow.push(0);negMoneyFlow.push(moneyFlow[i+1])}else{posMoneyFlow.push(0);negMoneyFlow.push(0)}}var sumPosFlow=windowOp(posMoneyFlow,14,sumVector);var sumNegFlow=windowOp(negMoneyFlow,14,sumVector);var moneyRatio=divVector(sumPosFlow,sumNegFlow);var mfi=[];moneyRatio.forEach(function(value){mfi.push(100-100/(1+value))});return mfi};macd=function(closeValues){slow=26;fast=12;signal=9;slowEMA=ema(closeValues,slow);fastEMA=ema(closeValues,fast);macdLine=combineVectors(slowEMA,fastEMA,function(slow,fast){if(slow==0){return 0}return 100*(fast/slow-1)});signalLine=ema(macdLine.slice(25),signal);for(var i=0;i<25;i++){signalLine.unshift(0)}histLine=diffVectors(macdLine,signalLine);return{macd:macdLine,signal:signalLine,hist:histLine}};momentum=function(closePrices,order){momentumN=function(chunk){return chunk[chunk.length-1]-chunk[0]};return windowOp(closePrices,order+1,momentumN)};roc=function(closePrices,order){rocN=function(chunk){return(chunk[chunk.length-1]-chunk[0])/chunk[0]};return windowOp(closePrices,order+1,rocN)};rsi=function(closePrices,order){if(closePrices.length<order+1){return[-1]}gains=[];losses=[];for(var i=0;i<closePrices.length;i++){diff=closePrices[i+1]-closePrices[i];if(diff>0){gains.push(diff);losses.push(0)}else if(diff<0){gains.push(0);losses.push(Math.abs(diff))}else{gains.push(0);losses.push(0)}}result=[];avgGain=avgVector(gains.slice(0,order));avgLoss=avgVector(losses.slice(0,order));firstRS=avgGain/avgLoss;result.push(100-100/(1+firstRS));for(var i=order;i<closePrices.length-1;i++){partialCurrentGain=(avgGain*(order-1)+gains[i])/order;partialCurrentLoss=(avgLoss*(order-1)+losses[i])/order;smoothedRS=partialCurrentGain/partialCurrentLoss;rsi=100-100/(1+smoothedRS);result.push(rsi);avgGain=partialCurrentGain;avgLoss=partialCurrentLoss}return result};floorPivots=function(highList,lowList,closeList){var result=new Array;for(var i=0;i<highList.length;i++){pivotLevel=(highList[i]+lowList[i]+closeList[i])/3;r1=2*pivotLevel-lowList[i];r2=pivotLevel+highList[i]-lowList[i];r3=r1+highList[i]-lowList[i];s1=2*pivotLevel-highList[i];s2=pivotLevel-highList[i]+lowList[i];s3=s1-highList[i]+lowList[i];elem={r3:r3,r2:r2,r1:r1,pl:pivotLevel,s1:s1,s2:s2,s3:s3};result.push(elem)}return result};tomDemarksPoints=function(highList,lowList,openList,closeList){var result=new Array;for(var i=0;i<highList.length;i++){var x=0;if(closeList[i]<openList[i]){x=highList[i]+(2*lowList[i]+closeList[i])}if(closeList[i]>openList[i]){x=2*highList[i]+lowList[i]+closeList[i]}if(closeList[i]==openList[i]){x=highList[i]+lowList[i]+2*closeList[i]}newHigh=x/2-lowList[i];newLow=x/2-highList[i];elem={low:newLow,high:newHigh};result.push(elem)}return result};woodiesPoints=function(highList,lowList,closeList){var result=new Array;for(var i=0;i<highList.length;i++){var x=0;var pivot=(highList[i]+lowList[i]+2*closeList[i])/4;var r1=2*pivot-lowList[i];var r2=pivot+highList[i]-lowList[i];var s1=2*pivot-highList[i];var s2=pivot-highList[i]+lowList[i];elem={pivot:pivot,r1:r1,s1:s1,s2:s2,r2:r2};result.push(elem)}return result};camarillaPoints=function(highList,lowList,closeList){var result=new Array;for(var i=0;i<highList.length;i++){var diff=highList[i]-lowList[i];var r4=diff*1.1/2+closeList[i];var r3=diff*1.1/4+closeList[i];var r2=diff*1.1/6+closeList[i];var r1=diff*1.1/12+closeList[i];var s1=closeList[i]-diff*1.1/12;var s2=closeList[i]-diff*1.1/6;var s3=closeList[i]-diff*1.1/4;var s4=closeList[i]-diff*1.1/2;elem={r4:r4,r3:r3,r2:r2,r1:r1,s1:s1,s2:s2,s3:s3,s4:s4};result.push(elem)}return result};fibonacciRetrs=function(lowList,highList,trend){var result=new Array;var retracements=[1,.618,.5,.382,.236,0];if(trend=="DOWNTREND"){for(var i=0;i<highList.length;i++){var diff=highList[i]-lowList[i];var elem=new Array;for(var r=0;r<retracements.length;r++){var level=highList[i]-diff*retracements[r];elem.push(level)}result.push(elem)}}else{for(var i=0;i<lowList.length;i++){var diff=highList[i]-lowList[i];var elem=new Array;for(var r=0;r<retracements.length;r++){var level=lowList[i]+diff*retracements[r];elem.push(level)}result.push(elem)}}return result};